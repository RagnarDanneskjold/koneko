; --                                                            ; {{{1
;
; File        : prelude.knk
; Maintainer  : Felix C. Stegerman <flx@obfusk.net>
; Date        : 2020-01-26
;
; Copyright   : Copyright (C) 2020  Felix C. Stegerman
; Version     : v0.0.1
; License     : LGPLv3+
;
; --                                                            ; }}}1

:__prld__ __defmodule__[

; -- TODO --
;
; * more functions!
; * refactor!
; * generate docs!
;
; --

; -- Aliases for Primitives --                                  ; {{{1

:def                '__def__                __def__

:call               '__call__                 def
:apply              '__apply__                def
:apply-dict         '__apply-dict__           def

:if                 '__if__                   def

:defmulti           '__defmulti__             def
:defrecord          '__defrecord__            def

:=>                 '__=>__                   def
:dict               '__dict__                 def

:show               '__show__                 def
:say!               '__say!__                 def
:ask!               '__ask!__                 def

:type               '__type__                 def
:callable?          '__callable?__            def
:function?          '__function?__            def

:defmodule          '__defmodule__            def
:import             '__import__               def
:import-from        '__import-from__          def

:=                  '__=__                    def
:not=               '__not=__                 def
:<                  '__<__                    def
:<=                 '__<=__                   def
:>                  '__>__                    def
:>=                 '__>=__                   def
:<=>                '__<=>__                  def

:eq                 '__eq__                   def
:neq                '__neq__                  def
:lt                 '__lt__                   def
:lte                '__lte__                  def
:gt                 '__gt__                   def
:gte                '__gte__                  def
:cmp                '__cmp__                  def

:int->float         '__int->float__           def
:record->dict       '__record->dict__         def

:record-type        '__record-type__          def
:record-values      '__record-values__        def
:record-type-name   '__record-type-name__     def
:record-type-fields '__record-type-fields__   def

:fail               '__fail__                 def

:rx-match           '__rx-match__             def
:rx-sub             '__rx-sub__               def

:par                '__par__                  def
:sleep              '__sleep__                def

                                                                ; }}}1

; -- Stack Shuffling --                                         ; {{{1

; swap top 2 values
;
; >>> , 1 2 show-stack
; 2
; 1
; >>> , swap show-stack
; 1
; 2

:swap   [ x y . 'y 'x ] def                   ; ⇔ '__swap__
:><     'swap           def

; rotate top 3 values
;
; >>> , 1 2 3 rot> show-stack
; 2
; 1
; 3
; >>> , <rot show-stack
; 3
; 2
; 1

:rot>   [ x y z . 'z 'x 'y  ] def             ; ⇔ [ [] $ 2dip ]
:<rot   [ x y z . 'y 'z 'x  ] def             ; ⇔ [ [] 2$ dip ]

; duplicate top value(s)
;
; >>> , 42 dup show-stack
; 42
; 42
; >>> clear-stack
; >>> , 1 2 2dup show-stack
; 2
; 1
; 2
; 1
; >>> ( 1 2 3 3dup )
; ( 1 2 3 1 2 3 )

 :dup   [ x   . 'x 'x       ] def
:2dup   [ x y . 'x 'y 'x 'y ] def             ; ⇔ [ over over ]
:3dup   [ 2over over2 ] def

; remove top value(s)
;
; >>> nil
; nil
; >>> drop
; >>> drop
; *** ERROR: stack underflow
; >>> 42 37 2drop
; >>> 1 2 3 3drop

 :drop  [ _     . ] def
:2drop  [ _ _   . ] def                       ; ⇔ [ drop drop ]
:3drop  [ _ _ _ . ] def

; drop value immediately preceding the top
;
; >>> , 42 37 nip show-stack
; 37

:nip    [ _ y . 'y ] def                      ; ⇔ [ 'drop dip ]

; copy value(s) immediately preceding the top "over" the top
;
; >>> , 1 2 over show-stack
; 1
; 2
; 1
; >>> clear-stack
; >>> , 1 2 3 2over show-stack
; 2
; 1
; 3
; 2
; 1

 :over  [ x y   . 'x 'y 'x        ] def       ; ⇔ [ 'dup dip swap ]
:2over  [ x y z . 'x 'y 'z 'x 'y  ] def       ; ⇔ [ over2 over2 ]

; copy value "over" the topmost 2
;
; >>> , 1 2 3 over2 show-stack
; 1
; 3
; 2
; 1

:over2  [ x y z . 'x 'y 'z 'x ] def           ; ⇔ [ 'over dip swap ]

                                                                ; }}}1

; -- Combinators --                                             ; {{{1

; partial application & function composition
;
; >>> , 1 '+ $                                        ; ⇔ [ 1 + ]
; >>> 2 swap call
; 3
; >>> 2, 3 4 [ + * ] 2$, call
; 14
; >>> 1, 2 3 4 [ + + + ] 3$, call
; 10
; >>> :foo [] $ call                                  ; [] $ ⇔ .[ '1 ]
; :foo
;
; >>> , [ 1 + ] [ 3 * ] @
; >>> 2 swap call
; 9
; >>> [ 2 * ] [ 1 + ] % call                          ; % ⇔ swap @
; 20
;
; >>> , 2 '-
; >>> , 1 $$                                          ; ⇔ [ f . 1 f ]
; >>> call
; 1
; >>> 2 [ + * ], 3 4 2$$, call
; 14
; >>> 1 [ + + + ], 2 3 4 3$$, call
; 10

 :$     '[ '1 .2       ] def                                    ; TODO
:2$     '[ '1 '2 .3    ] def
:3$     '[ '1 '2 '3 .4 ] def

:@      '[ .1 .2 ] def
:%      '[ .2 .1 ] def

 :$$    '[ f . '1 f       ] def
:2$$    '[ f . '1 '2 f    ] def
:3$$    '[ f . '1 '2 '3 f ] def

; remove top value(s), call function, restore value(s)
;
; >>> , 1 2 'dup dip show-stack
; 2
; 1
; 1
; >>> clear-stack
; >>> , 1 2 3 4 '- 2dip show-stack
; 4
; 3
; -1
; >>> clear-stack
; >>> , 1 2 3 4 'neg 3dip show-stack
; 4
; 3
; 2
; -1

 :dip   [ x f   . f 'x    ] def
:2dip   [ x y f . f 'x 'y ] def               ; ⇔ [ 'dip $ dip ]
:3dip   [ '2dip $ dip     ] def

; copy top value(s), call function, push value(s)
;
; >>> , 2 [ dup * ] keep show-stack
; 2
; 4
; >>> clear-stack
; >>> , 2 3 '* 2keep show-stack
; 3
; 2
; 6

 :keep  [  over 'call  dip  ] def             ; ⇔ [ x f . 'x f 'x ]
:2keep  [ 2over 'call 2dip  ] def             ; ⇔ [ '2dup dip 2dip ]

; call multiple functions on one value
;
; >>> , 35 [ 2 + ] [ 7 + ] bi show-stack
; 42
; 37
; >>> clear-stack
; >>> , 2 [ 1 + ] [ 2 * ] [ 3 - ] tri show-stack
; -1
; 4
; 3
;
; >>> ( 2 ( [ 1 + ] [ 2 * ] [ 3 - ] ) mlt )
; ( 3 4 -1 )

:bi     [ x f g   . 'x f 'x g       ] def     ; ⇔ [ 'keep dip call ]
:tri    [ x f g h . 'x f 'x g 'x h  ] def     ; ⇔ [ 'keep 2dip bi ]

:mlt    [ swap $$ each ] def

; call one function on each of multiple values
;
; >>> 2 3 [ dup * ] bi$ +
; 13
; >>> clear-stack
; >>> , 2 3 4 [ dup * ] tri$ show-stack
; 16
; 9
; 4
;
; >>> ( ( 2 3 4 ) [ dup * ] mlt$ )                    ; mlt$ ⇔ each
; ( 4 9 16 )
;
; >>> 2 3 'even? either?                              ; ⇔ bi$ and
; #t
; >>> 2 4 'even? both?                                ; ⇔ bi$ or
; #t
;
; >>> ( 0 2 4 ) 'even? all?
; #t
; >>> ( 37 42 ) 'even? any?
; #t

:bi$    [ x y f   . 'x f 'y f       ] def     ; ⇔ [ dup bi~ ]
:tri$   [ x y z f . 'x f 'y f 'z f  ] def     ; ⇔ [ 2dup tri~ ]

:mlt$   [ each ] def

:both?    [ bi$ and ] def
:either?  [ bi$ or  ] def

:all?   [ p? . [ #t ] [ >< p? dup [ drop 'p? all? ] 'nip if ] ^seq ] def
:any?   [ p? . [ #f ] [ >< p? dup 'nip [ drop 'p? any? ] if ] ^seq ] def

; call multiple functions on their "paired" value
;
; >>> , 4 9 [ 2 + ] [ 3 div ] bi~ show-stack
; 3
; 6
; >>> clear-stack
; >>> ( 1 2 3 :x :y :z '[ '1 swap => ] tri$ tri~ )
; ( :x 1 => :y 2 => :z 3 => )
;
; >>> ( ( 1 2 3 ) ( :x :y :z ) '[ '1 swap => ] map mlt~ )
; ( :x 1 => :y 2 => :z 3 => )

:bi~    [ x y f g     . 'x f 'y g       ] def ; ⇔ [ 'dip dip call ]
:tri~   [ x y z f g h . 'x f 'y g 'z h  ] def

:mlt~   [ 'call zip [] each ] def

; TODO: mlt*, 2mlt, 2mlt$, 2mlt~, ...

; call multiple functions on each of multiple values
;
; >>> , 2 3 [ dup * ] 'neg bi* show-stack
; -3
; -2
; 9
; 4

:bi*    [ [ 'bi$ $ 2keep ] dip bi$ ] def

; call multiple functions on two values
;
; >>> , 1 2 '+ '- 2bi show-stack
; -1
; 3
; >>> clear-stack
; >>> , 7 2 '+ '- 'div 2tri show-stack
; 3
; 5
; 9

:2bi    [ '2keep dip call ] def
:2tri   [ '2keep 2dip 2bi ] def

; call one function on each of multiple pairs of values
;
; >>> , :x 1 :y 2 '=> 2bi$ show-stack
; :y 2 =>
; :x 1 =>
; >>> clear-stack
; >>> , :x :y 1 2 '=> 2bi$' show-stack
; :y 2 =>
; :x 1 =>

:2bi$   [ dup 2bi~        ] def
:2bi$'  [ 'swap 2dip 2bi$ ] def

; call multiple functions on their "paired" pair of values
;
; >>> , 1 2 3 4 '+ '- 2bi~ show-stack
; -1
; 3
; >>> clear-stack
; >>> , 1 3 2 4 '+ '- 2bi~' show-stack
; -1
; 3

:2bi~   [ '2dip dip call  ] def
:2bi~'  [ 'swap 3dip 2bi~ ] def

; partially apply multiple functions to one value
;
; >>> 5 [ 37 + ] [ 37 - ] ~pos
; 42
; >>> 5 37 '+ '- $bi ~pos
; 42

:$bi    [ x f g . 'x 'f $ 'x 'g $ ] def       ; ⇔ [ [ '$ $ ] bi$ bi ]

; partially apply "first" or "second" function to value
;
; >>> 5 'neg [ 37 + ] ~neg
; 42
; >>> 5 37 'neg '+ $snd ~neg
; 42
;
; >>> 5 37 '+ 'neg '$ dip ~pos
; 42
; >>> 5 37 '+ 'neg $fst ~pos
; 42

:$fst   [ '$ dip ] def
:$snd   [ x f g . 'f 'x 'g $ ] def

                                                                ; }}}1

; -- Conditionals, Logic & Order --                             ; {{{1

; conditional expression that takes two values (instead of functions)
;
; foo bar ? ≈ [ foo ] [ bar ] if
; foo bar ? ⇔ foo [] $ bar [] $ if
;
; NB: foo and bar are always evaluated.
;
; >>> #t 42 37 ?
; 42

:?      [ '[ '1 ] bi$ if ] def

; conditional w/ implicit "else branch" (that drops values -- if
; necessary -- to match the arity of the "if branch")
;
; >>> 1 2 = [ "oh no!" say! ] when                    ; -0 +0 = 0
; >>> 1 1 = [ "good!"  say! ] when
; good!
; >>> , 42 dup 2 mod 0 = [ 2 div ] when show-stack    ; -1 +1 = 0
; 21
; >>> clear-stack
; >>> 1 2 2dup = '+ when1                             ; -2 +1 = 1
; 1
; >>> 2 2 2 2dup = [ + * ] when2                      ; -3 +1 = 2
; 8

:when   [ []     if ] def
:when1  [ 'drop  if ] def
:when2  [ '2drop if ] def

; predicate "branch"
;
; dup p? [ foo ] [ bar ] if ⇔ [ foo ] [ bar ] 'p? ~?
;
; >>> , :collatz [
; ...     [ [ 2 div ] [ 3 * 1 + ] 'even? ~? ]
; ...     iterate [ 1 not= ] take-while ( 1 ) ++
; ...   ] def
; >>> 19 collatz ->list
; ( 19 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1 )

:~?     [ 'dup % 2dip if ] def

; bool, logical inverse, conjunction & disjunction
;
; NB: "and" and "or" return one of their operands (which are tested
; for "truthyness", but may not be bools).
;
; >>> 5 bool
; #t
; >>> 5 not
; #f
; >>> nil not
; #t
; >>> nil 5 or
; 5
; >>> nil 5 and
; nil
; >>> 2 3 or
; 2
; >>> 2 3 and
; 3

:bool   [ #t #f    ? ] def
:not    [ #f #t    ? ] def
:and    [ over     ? ] def
:or     [ 'dup dip ? ] def

; comparison "branch"
;
; >>> 41 'inc 'dec 41 ~[=]
; 42
; >>> 41 'dec 'inc 41 ~[not=]
; 42
; >>> 41 'inc 'dec 99 ~[<]
; 42
; >>> 43 'inc 'dec 37 ~[<=]
; 42
; >>> 41 'inc 'dec 37 ~[>]
; 42
; >>> 41 'inc 'dec 41 ~[>=]
; 42
;
; >>> 42 37 '- '* '+ ~<=>
; 79
; >>> 37 [ :< ] [ := ] [ :> ] 42 ~[<=>] nip
; :<
;
; NB: ~<=> leaves both operands, ~[<=>] only the "left".

:~[=]     [ '=    $ ~? ] def
:~[not=]  [ 'not= $ ~? ] def
:~[<]     [ '<    $ ~? ] def
:~[<=]    [ '<=   $ ~? ] def
:~[>]     [ '>    $ ~? ] def
:~[>=]    [ '>=   $ ~? ] def

:~<=>   [ f g h . 2dup <=> [ drop g ] [ 0 < 'f 'h if ] 0 ~[=] ] def
:~[<=>] [ [] $ 3dip [ 'drop % ] tri$ ~<=> ] def

; alternative comparison "branch"
;
; >>> 41.0 'inc 'dec 41 ~[eq]
; 42.0
; >>> 41.0 'dec 'inc 41 ~[neq]
; 42.0
; >>> 41.0 'inc 'dec 99 ~[lt]
; 42.0
; >>> 43.0 'inc 'dec 37 ~[lte]
; 42.0
; >>> 41.0 'inc 'dec 37 ~[gt]
; 42.0
; >>> 41.0 'inc 'dec 41 ~[gte]
; 42.0
;
; >>> 42 37.0 '- '* '+ ~cmp
; 79.0
; >>> 37 [ :< ] [ := ] [ :> ] 42.0 ~[cmp] nip
; :<
;
; NB: ~cmp leaves both operands, ~[cmp] only the "left".

:~[eq]    [ 'eq  $ ~? ] def
:~[neq]   [ 'neq $ ~? ] def
:~[lt]    [ 'lt  $ ~? ] def
:~[lte]   [ 'lte $ ~? ] def
:~[gt]    [ 'gt  $ ~? ] def
:~[gte]   [ 'gte $ ~? ] def

:~cmp   [ f g h . 2dup cmp [ drop g ] [ neg? 'f 'h if ] 0 ~[eq] ] def
:~[cmp] [ [] $ 3dip [ 'drop % ] tri$ ~cmp ] def

; minimum & maximum
;
; >>> 1 2 min
; 1
; >>> -1 -2 max
; -1
;
; >>> 2 1.0 min
; 2
; >>> 2 1.0 min'
; 1.0
; >>> 2 1.0 max'
; 2

:min    [ '<= min-by ] def
:max    [ '>= max-by ] def

:min'   [ 'lte min-by ] def
:max'   [ 'gte max-by ] def

:min-by [ f . 2dup f 'drop 'nip if ] def
:max-by [ f . 2dup f 'drop 'nip if ] def

; conditional expression
;
; Takes a value and a list of tests and exprs.  It evaluates each test
; one at a time: functions are predicates and are called (with the
; value pushed onto the stack); the result -- or the test itself if
; not a function -- is tested for truthiness.  If the test passes, its
; corresponding expr is returned and called (if it's a block).
;
; >>> , :temp [
; ...     [ show " is " ++ ]
; ...     [ ( [ 15 < ] "cold!" [ 25 > ] "warm!" :else "ok!" ) cond1 ]
; ...     bi ++ say!
; ...   ] def
; >>> 10 temp
; 10 is cold!
; >>> 20 temp
; 20 is ok!
; >>> 30 temp
; 30 is warm!

  :cond1  [ _cond1 dup block? 'call when ] def                  ; TODO
 :_cond1  [ cons '_&cond1 apply ] def
:_&cond1  [ x p? f & .
            'x 'p? 'call 'nip 'function? ~? [ 'f ] [ 'x '& _cond1 ] if
          ] def

; TODO: cond=, ...

; combined "branch"
;
; >>> -1 [ :pos ] [ :neg ] [ :zero ] ( '~pos '~neg ) ~>> nip
; :neg
;
; >>> , :~type [ .[ type '1 = ] ~? ] def
; >>> , :~strint [ ( [ :str ~type ] [ :int ~type ] ) ~>> ] def
; >>> , :f [ [ "bar" ++ ] [ 5 + ] [ drop :oops ] ~strint ] def
; >>> "foo" f
; "foobar"
; >>> 37 f
; 42
; >>> nil f
; :oops

:~>>    [ reverse _~>> ] def
:_~>>   [ 'call [ f ft . .[ '1 '2 f ] 'ft _~>> ] ^seq ] def

                                                                ; }}}1

; -- Arithmetic --                                              ; {{{1

; addition, subtraction & multiplication
;
; NB: when mixing ints and floats, ints are coerced to floats and may
; lose precision.
;
; >>> 1 2 +
; 3
; >>> 4 3 -
; 1
; >>> 6 7 *
; 42
; >>> 1.0 2.0 +
; 3.0
; >>> 4.0 3 -
; 1.0
; >>> 6 7.0 *
; 42.0

:+ ( :int   :int    ) [ __int+__          ] defmulti
:+ ( :float :float  ) [ __float+__        ] defmulti
:+ ( :int   :float  ) [ 'int->float dip + ] defmulti
:+ ( :float :int    ) [  int->float     + ] defmulti

:- ( :int   :int    ) [ __int-__          ] defmulti
:- ( :float :float  ) [ __float-__        ] defmulti
:- ( :int   :float  ) [ 'int->float dip - ] defmulti
:- ( :float :int    ) [  int->float     - ] defmulti

:* ( :int   :int    ) [ __int*__          ] defmulti
:* ( :float :float  ) [ __float*__        ] defmulti
:* ( :int   :float  ) [ 'int->float dip * ] defmulti
:* ( :float :int    ) [  int->float     * ] defmulti

; negation (additive inverse)
;
; >>> 10 neg
; -10
; >>> -10 neg
; 10
; >>> 3.14 neg
; -3.14

:neg    [ 0 swap - ] def

; division & modulo
;
; >>> 1.0 2.0 /
; 0.5
; >>> 8 3 div
; 2
; >>> 8 3 mod
; 2

:/      '__float/__ def
:div    '__div__    def
:mod    '__mod__    def

; common predicates
;
; >>> 10 3 div?
; #f
; >>> 42 7 div?
; #t
; >>> ( 2 3 4 ) 'even? filter ->list
; ( 2 4 )
; >>> ( 1 2 3 ) 'odd? filter ->list
; ( 1 3 )
;
; >>> , ( -1 -1.1 0 0.0 1 1.1 )
; >>>      dup 'neg?  filter ->list
; ( -1 -1.1 )
; >>> drop dup 'zero? filter ->list
; ( 0 0.0 )
; >>> drop dup 'pos?  filter ->list
; ( 1 1.1 )

:div?   [ mod 0 =   ] def
:even?  [ 2 div?    ] def
:odd?   [ even? not ] def

:neg?   [ 0 lt ] def
:zero?  [ 0 eq ] def
:pos?   [ 0 gt ] def

; increment & decrement
;
; >>> 41 inc
; 42
; >>> dec
; 41

:inc    [ 1 + ] def
:dec    [ 1 - ] def

; -- TODO --
;
; * div/mod vs quot/rem
; * abs, floor, ceil, round**, trunc, ...
; * pi, exp, log, sqrt, sin, cos, ...
; * ^ :math import ?!
;
; --

                                                                ; }}}1

; -- Strings & Characters --                                    ; {{{1

; NB: see also "Regexes".

; conversion between char (i.e. string of length 1) & int
; (representing a unicode codepoint)
;
; >>> "猫" ord
; 29483
; >>> 0x732b chr
; "猫"

:ord    '.ord     def
:chr    '__chr__  def

; convert to str
;
; >>> "foo" show
; "\"foo\""
; >>> "foo" ->str
; "foo"
; >>> :foo ->str
; ":foo"
; >>> 42 ->str
; "42"

:->str  ( :str  ) [       ] defmulti
:->str  ( :_    ) [ show  ] defmulti

; join a sequence of strings (separated by a separator)
;
; >>> "foobar" ->list
; ( "f" "o" "o" "b" "a" "r" )
; >>> join
; "foobar"
; >>> ( "Hello" "World" ) ", " join-with
; "Hello, World"
;
; >>> "foo" "bar" " & " ++sep++
; "foo & bar"

:join       [ "" join-with ] def                                ; TODO
:join-with  [ s . [ "" ] [ >< [ 's ++sep++ ] foldl ] ^seq ] def
:++sep++    [ >< ++ ++ ] def

; case conversion
;
; >>> "foo" upper-case
; "FOO"
; >>> "BAR" lower-case
; "bar"

:lower-case '.lower def
:upper-case '.upper def

; trimming whitespace
;
; >>> " foo " trim
; "foo"
; >>> " foo " triml
; "foo "
; >>> " foo " trimr
; " foo"

:trim   '.trim  def
:triml  '.triml def
:trimr  '.trimr def

; prefix & suffix predicates
;
; >>> "foo" "f" starts-with?                          ; prefix
; #t
; >>> "bar" "ar" ends-with?                           ; suffix
; #t
;
; >>> "foobar" "oba" elem?                            ; infix
; #t

:starts-with? [ swap !starts-with? ] def
:ends-with?   [ swap !ends-with?   ] def

                                                                ; }}}1

; -- Nil, Num & Pair --                                         ; {{{1

; nil "branch"
;
; >>> , :f [ [ "nil!" say! ] [ type show say! ] ~nil ] def
; >>> nil f
; nil!
; >>> 42 f
; :int
;
; >>> ( 1 ) 'rest ~> 'first ~> [ 1 + ] ~>
; nil
; >>> ( 1 2 ) 'rest ~> 'first ~> [ 1 + ] ~>
; 3
; >>> ( 3 4 ) ( 'rest 'first [ 1 + ] ) ~~>
; 5

:~nil   [ [ 'drop % ] dip 'nil? ~? ] def
:~>     [ [ nil ] swap ~nil ] def
:~~>    [ [ .[ .1 '2 ~~> ] ~> ] ^seq' ] def

; "convert" to nil: turn "empty"/"zero" values into (falsy) nil
;
; >>> ( "foo" "" 42 0 ( 1 2 3 ) () ) '->nil map ->list
; ( "foo" nil 42 nil ( 1 2 3 ) nil )

:->nil  ( :nil  )   [ ] defmulti
:->nil  ( :bool )   [ #t nil ? ] defmulti

:->nil  ( :int  )   [ [ drop nil ] [] ~zero  ] defmulti
:->nil  ( :_    )   [ [      nil ] [] ~seq   ] defmulti

; is int or float?
;
; >>> 1 num?
; #t
; >>> 3.14 num?
; #t
; >>> () num?
; #f

:num?   [ 'int? 'float? bi or ] def

; TODO: is-nan?

; number "branch"
;
; >>> 0 [ " negative" ] [ " non-negative" ] ~neg  'show dip ++ say!
; 0 non-negative
; >>> 0 [ " zero"     ] [ " non-zero"     ] ~zero 'show dip ++ say!
; 0 zero
; >>> 0 [ " positive" ] [ " non-positive" ] ~pos  'show dip ++ say!
; 0 non-positive
;
; >>> 4 [ :neg ] [ :zero ] [ :pos ] ~num nip
; :pos

:~neg   [ 0 ~[lt] ] def
:~zero  [ 0 ~[eq] ] def
:~pos   [ 0 ~[gt] ] def

:~num   [ 0 ~[cmp] ] def

; pair "pattern match"
;
; >>> , x: 42 'swap ^pair, show-stack
; :x
; 42

:^pair  [ [ '.key '.value bi ] dip call ] def

                                                                ; }}}1

; -- Sequences, Lists & Ranges --                               ; {{{1

; NB: inclusive; infinite if stop is nil.
:Range ( :start :stop ) defrecord

:range              [ 2dup 'float? either?
                      [ 1 range-step ] 'Range if ] def
:range-step         [ 3dup 3list 'float? any? [ '_->float tri$ ] when
                      >< 'range-from-step
                      [ >< range-from-to-step ] ~nil ] def

:range-from-to-step [ >< [ 'range-from-step keep ] dip
                      >< _range-to-step ] def
:range-from-step    [ '+ $ iterate ] def

:_range-to-step     [ [ dup float? [ 2.0 / + ] when1 ]
                      [ pos? '<= '>= ? ] bi $ take-while ] def
:_->float           [ dup int? 'int->float when ] def

; int ranges
;
; >>> 2 10 [m-n] ->list
; ( 2 3 4 5 6 7 8 9 10 )
; >>> 2 10 [m-n) ->list
; ( 2 3 4 5 6 7 8 9 )
; >>> 4 [m-) 10 take-first ->list
; ( 4 5 6 7 8 9 10 11 12 13 )
; >>> 10 [0-n] ->list
; ( 0 1 2 3 4 5 6 7 8 9 10 )
; >>> 10 [0-n) ->list
; ( 0 1 2 3 4 5 6 7 8 9 )
; >>> [0-) 10 take-first ->list
; ( 0 1 2 3 4 5 6 7 8 9 )
; >>> 10 [1-n] ->list
; ( 1 2 3 4 5 6 7 8 9 10 )
; >>> 10 [1-n) ->list
; ( 1 2 3 4 5 6 7 8 9 )
; >>> [1-) 10 take-first ->list
; ( 1 2 3 4 5 6 7 8 9 10 )
;
; float ranges
;
; >>> 2.1 10.1 [m-n] ->list
; ( 2.1 3.1 4.1 5.1 6.1 7.1 8.1 9.1 10.1 )
; >>> 2.1 10.1 [m-n) ->list
; ( 2.1 3.1 4.1 5.1 6.1 7.1 8.1 9.1 )
; >>> 4.1 [m-) 10 take-first ->list
; ( 4.1 5.1 6.1 7.1 8.1 9.1 10.1 11.1 12.1 13.1 )
; >>> 10.0 [0-n] ->list
; ( 0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 )
; >>> 10.0 [0-n) ->list
; ( 0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 )
; >>> 10.0 [1-n] ->list
; ( 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 )
; >>> 10.0 [1-n) ->list
; ( 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 )
;
; ranges with step
;
; >>> 2 10 2 [m-n:s] ->list
; ( 2 4 6 8 10 )
; >>> 2 11 2.0 [m-n:s) ->list
; ( 2.0 4.0 6.0 8.0 10.0 )
; >>> 4 2 [m-:s) 5 take-first ->list
; ( 4 6 8 10 12 )
; >>> 10.0 2 [0-n:s] ->list
; ( 0.0 2.0 4.0 6.0 8.0 10.0 )
; >>> 10 2 [0-n:s) ->list
; ( 0 2 4 6 8 )
; >>> 2.0 [0-:s) 5 take-first ->list
; ( 0.0 2.0 4.0 6.0 8.0 )
; >>> 10 3 [1-n:s] ->list
; ( 1 4 7 10 )
; >>> 10 3.0 [1-n:s) ->list
; ( 1.0 4.0 7.0 )
; >>> 2 [1-:s) 5 take-first ->list
; ( 1 3 5 7 9 )

:[m-n]    'range                 def
:[m-n)    [   dec      [m-n]   ] def
:[m-)     [   nil      [m-n]   ] def
:[0-n]    [ 0     swap [m-n]   ] def
:[0-n)    [ 0     swap [m-n)   ] def
:[0-)     [ 0 nil      [m-n]   ] def
:[1-n]    [ 1     swap [m-n]   ] def
:[1-n)    [ 1     swap [m-n)   ] def
:[1-)     [ 1 nil      [m-n]   ] def

:[m-n:s]  'range-step            def
:[m-n:s)  [   '- keep  [m-n:s] ] def
:[m-:s)   [   nil ><   [m-n:s] ] def
:[0-n:s]  [ 0     rot> [m-n:s] ] def
:[0-n:s)  [ 0     rot> [m-n:s) ] def
:[0-:s)   [ 0 nil <rot [m-n:s] ] def
:[1-n:s]  [ 1     rot> [m-n:s] ] def
:[1-n:s)  [ 1     rot> [m-n:s) ] def
:[1-:s)   [ 1 nil <rot [m-n:s] ] def

; small lists
;
; >>> 42 1list
; ( 42 )
; >>> :x :y 2list
; ( :x :y )
; >>> :x :y :z 3list
; ( :x :y :z )

:1list  [ () cons     ] def
:2list  [ 1list cons  ] def
:3list  [ 2list cons  ] def

; lazy sequences
;
;             list    block (lazy rest)         append
; >>> , :fibs ( 0 1 ) [ 'fibs dup rest '+ zip ] lseq def
; >>> 'fibs 10 take-first ->list
; ( 0 1 1 2 3 5 8 13 21 34 )
;
; >>> :head [ ( :tail :is :lazy ) ] lseq1 ->list      ; singleton
; ( :head :tail :is :lazy )
;
; NB: use of side-effects is for demonstration purposes only and
; should be avoided in most code.
;
; >>> , [ "evaluated once" say!, ( 1 2 3 ) ] lazy-seq ; completely lazy
; >>> dup !thunk
; evaluated once
; ( 1 2 3 )
; >>> drop !thunk
; ( 1 2 3 )

:LSeq ( :chunk :thunk ) defrecord   ; NB: chunk must be a list

:lseq     [ __thunk__  LSeq ] def
:lseq1    [ '1list dip lseq ] def
:lazy-seq [ () swap    lseq ] def

; "as sequence"
;
; * returns nil if empty
; * converts to a proper sequence type if needed
;   (e.g. strings & dicts to lists)
; * otherwise returns the sequence unmodified
;
; NB: whether conversion is performed and to what type may change; the
; only guarantee is that a "proper" sequence type is returned.
;
; >>> nil seq
; nil
; >>> "foo" seq                   ; str becomes a list
; ( "f" "o" "o" )
; >>> ( 1 2 3 ) seq
; ( 1 2 3 )
; >>> "" seq
; nil
; >>> () seq
; nil
; >>> { x: 1, y: 2 } seq          ; dict becomes a list
; ( :x 1 => :y 2 => )
; >>> 10 [1-n] seq ->list
; ( 1 2 3 4 5 6 7 8 9 10 )
; >>> [ ( 1 2 3 ) ] lazy-seq seq  ; checking emptiness forces evaluation
; ( 1 2 3 )

:seq    ( :nil    ) [ ] defmulti

:seq    ( :str    ) [ ->nil '->list ~> ] defmulti               ; TODO
:seq    ( :dict   ) [ ->nil '.pairs ~> ] defmulti               ; TODO

:seq    ( :list   ) [ ->nil ] defmulti
:seq    ( :Range  ) [ ->nil ] defmulti

:seq    ( :LSeq   ) [ dup .chunk empty? [ !thunk seq ] when ] defmulti

; generic "uncons"
;
; unseq ⇔ 'first 'rest bi
;
; >>> , ( 1 2 ) unseq show-stack
; ( 2 )
; 1
; >>> clear-stack
; >>> , 3 10 [m-n] unseq ->list show-stack
; ( 4 5 6 7 8 9 10 )
; 3
; >>> clear-stack
; >>> , [ ( 1 2 ) ] lazy-seq unseq show-stack
; ( 2 )
; 1

:unseq  ( :list   ) [ [ nil nil ] [] ^list ] defmulti
:unseq  ( :Range  ) [ [ nil nil ] [ [ [ dup inc ] dip Range ] ^Range ]
                      ~seq ] defmulti
:unseq  ( :LSeq   ) [ [ t . [ t unseq ] [ unseq 't LSeq ] ~seq ]
                      ^LSeq ] defmulti

; generic "head" & "tail"
;
; 'first 'rest bi ⇔ unseq
;
; * first returns the first element
; * rest returns the rest of the sequence
; * both return nil if the sequence is empty
;
; >>> ( 1 2 3 ) first
; 1
; >>> 4 [1-n] rest ->list
; ( 2 3 4 )

:first  ( :_ ) [ unseq drop ] defmulti
:rest   ( :_ ) [ unseq nip  ] defmulti

; is the sequence empty?
;
; empty? ⇔ seq not
;
; >>> "foo" empty?
; #f
; >>> () empty?
; #t
; >>> { x: 1 } empty?
; #f
; >>> 1 [1-n] rest empty?
; #t
; >>> ( 1 2 3 ) [ 1 + ] map empty?
; #f

:empty? ( :str    ) [ .empty? ] defmulti
:empty? ( :list   ) [ .empty? ] defmulti
:empty? ( :dict   ) [ .empty? ] defmulti
:empty? ( :Range  ) [ [ [ drop #f ] '> ~nil ] ^Range ] defmulti
:empty? ( :_      ) [ seq not ] defmulti

; sequence length
;
; NB: sequence must be finite (or a range).
;
; >>> "foo" len
; 3
; >>> ( 1 2 ) len
; 2
; >>> { x: 1 } len
; 1
; >>> 37 42 [m-n) len
; 5
; >>> 42 [m-) len                                     ; infinite
; nil
; >>> ( 1 2 3 ) [ 2 >= ] filter len
; 2

:len    ( :str    ) [ .len      ] defmulti
:len    ( :list   ) [ .len      ] defmulti
:len    ( :dict   ) [ .len      ] defmulti
:len    ( :Range  ) [ range-len ] defmulti
:len    ( :_      ) [ seq-len   ] defmulti

:range-len  [ [ [ drop nil ] [ >< - inc 0 max ] ~nil ] ^Range ] def
:seq-len    [ 0 swap [ drop inc ] each ] def

; append two sequences
;
; NB: to merge two dicts, use update.
;
; >>> "foo" "bar" ++
; "foobar"
; >>> ( 1 2 3 ) ( 4 5 ) ++
; ( 1 2 3 4 5 )
;
; >>> ( 1 2 3 ) [ ( 4 5 ) ] lazy-seq ++ ->list
; ( 1 2 3 4 5 )
; >>> [ ( 1 2 3 ) ] lazy-seq ( 4 5 ) ++ ->list
; ( 1 2 3 4 5 )

:++     ( :str  :str  ) [ !append ] defmulti
:++     ( :list :list ) [ !append ] defmulti

:++     ( :nil  :list ) [ nip ] defmulti                        ; TODO
:++     ( :nil  :LSeq ) [ nip ] defmulti

:++     ( :list :LSeq ) [ [ '++ dip LSeq ] ^LSeq ] defmulti
:++     ( :LSeq :list ) [ _lseq++ ] defmulti
:++     ( :LSeq :LSeq ) [ _lseq++ ] defmulti

:_lseq++ [ .[ [ '1 ++ ] @ lseq ] ^LSeq ] def

; convert to list
;
; >>> "foo" ->list
; ( "f" "o" "o" )
; >>> ( 1 2 3 ) ->list
; ( 1 2 3 )
; >>> { x: 1, y: 2 } ->list
; ( :x 1 => :y 2 => )

:->list ( :str  ) [ .->list ] defmulti
:->list ( :list ) [         ] defmulti
:->list ( :dict ) [ .pairs  ] defmulti

:->list ( :_    ) [ xs . ( 'xs [] each ) ] defmulti             ; TODO
                ; [ [ () ] [ ->list cons ] ^seq ]

; list & sequence "pattern match"
;
; * ^seq uses seq and "unseq"s the sequence when not empty
; * ~seq uses empty? and returns the original sequence when not empty
;
; >>> ( 1 2 3 ) [ "empty" ] [ hd tl . 'hd ] ^list     ; head or "empty"
; 1
; >>> () [ "empty" ] 'drop ^seq
; "empty"
; >>> ( 4 5 ) [ "empty" ] 'head^ ~seq
; 4
; >>> "foo" [ () ] 'nip ^seq
; ( "o" "o" )
; >>> "foo" [ "" ] [] ~seq
; "foo"

:^list  [ [ 'drop % ] dip '.uncons^ % '.empty? ~? ] def
:^seq   [ 'seq 2dip 'unseq % ~nil ] def
:~seq   [ [ 'drop % ] dip 'empty? ~? ] def

:^seq'  [ [] swap ^seq ] def

; sequence conditional & "pattern match"
;
; NB: the difference between when-seq and with-seq is that the latter
; "unseq"s the sequence when not empty.
;
; >>> () 'len when-seq
; nil
; >>> ( 1 2 3 ) 'len when-seq
; 3
; >>> ( 1 2 3 ) 'drop with-seq
; 1
; >>> () 'drop with-seq
; nil

:when-seq [ [ seq dup ] dip when  ] def
:with-seq [ [ nil ] swap ^seq     ] def

; "lazy" map & filter
;
; >>> ( 1 2 3 ) [ dup * ] map ->list
; ( 1 4 9 )
; >>> ( 1 2 3 ) 'dup map ->list         ; multiple return values is OK
; ( 1 1 2 2 3 3 )
; >>> ( 1 2 3 4 ) 'even? filter ->list
; ( 2 4 )

:map    [ f . [ x xt . ( 'x f ) [ 'xt 'f map ] lseq ] with-seq ] def
:filter [ .[ [] 'drop '1 ~? ] map ] def

; zip(with)
;
; >>> ( :x :y ) ( 1 2 3 ) zip' ->list
; ( ( :x 1 ) ( :y 2 ) )
; >>> ( :x :y ) ( 1 2 3 ) [] zip ->list ; multiple return values is OK
; ( :x 1 :y 2 )
; >>> [1-) ( :x :y ) [ swap => ] zip ->list dict
; { :x 1 =>, :y 2 => }

:zip    [ f . [ drop nil ] [ y yt . [ x xt .
          ( 'x 'y f ) [ 'xt 'yt 'f zip ] lseq
        ] with-seq ] ^seq ] def
:zip'   [ '2list zip ] def

; TODO: unzip

; folding (left- and right-associative)
;
; NB: foldr' only partially applies the recursive step, allowing
; short-circuiting/laziness.
;
; >>> ( 2 3 4 ) 10 '- foldl                         ; ⇔ 10 2 - 3 - 4 -
; 1
; >>> ( 2 3 4 ) 10 '- foldr                         ; ⇔ 2 3 4 10 - - -
; -7
; >>> ( 2 3 4 ) () [ [ 1 + ] dip cons ] foldr       ; "strict"
; ( 3 4 5 )
; >>> ( 2 3 4 ) () [ [ 1 + ] dip call cons ] foldr' ; "lazy"
; ( 3 4 5 )

:foldl  [ f . swap [ rot> f 'f foldl      ] ^seq' ] def
:foldr  [ f . swap [ <rot 'f foldr f      ] ^seq' ] def
:foldr' [ f . swap [ <rot 'f 'foldr' 3$ f ] ^seq' ] def

; TODO: scanl, scanr
; TODO: min, max, sum, prod

; concatenation of all elements
;
; >>> ( ( 1 2 3 ) dup [ dup * ] map dup 'even? filter ) concat ->list
; ( 1 2 3 1 4 9 4 )

:concat [ () [ lazy-seq ++ ] foldr' ] def

; reverse order of elements; "strict"
;
; NB: reversing a list or str is guaranteed to return a value of the
; same type; reversing (most) other sequences returns a list.
;
; >>> ( 1 2 3 ) reverse
; ( 3 2 1 )
; >>> ( 1 2 3 ) [ dup * ] map reverse
; ( 9 4 1 )
; >>> "foobar" reverse
; "raboof"

:reverse  ( :str  ) [ .reverse        ] defmulti
:reverse  ( :_    ) [ reverse-as-list ] defmulti

; TODO: finite range

:reverse-as-list [ () [ swap cons ] foldl ] def

; iterating over a sequence
;
; >>> , ( "Hello" "World" ) 'say! each
; Hello
; World
; >>> , ( 1 2 3 ) [] each show-stack
; 3
; 2
; 1
; >>> ( ( 1 2 ) 'dup each )
; ( 1 1 2 2 )

:each   [ f . [ 'f dip 'f each ] ^seq' ] def

; generating (infinite) sequences & taking subsequences
;
; >>> ( 1 2 3 ) cycle 10 take-first ->list
; ( 1 2 3 1 2 3 1 2 3 1 )
; >>> 0 'inc iterate 10 take-first 2 drop-first ->list
; ( 2 3 4 5 6 7 8 9 )
; >>> 1 [ 2 * ] iterate [ 10 < ] drop-while [ 80 < ] take-while ->list
; ( 16 32 64 )
; >>> 42 repeat 4 take-first ->list
; ( 42 42 42 42 )
; >>> :x 3 replicate ->list
; ( :x :x :x )

:cycle      [ repeat concat ] def
:iterate    [ x f . 'x [ 'x f 'f iterate ] lseq1 ] def
:repeat     [ dup 'repeat $ lseq1 ] def
:replicate  [ 'repeat dip take-first ] def

:take-first [ .[ '1 [ dec 'take-first 2$ lseq1 ] [ 3drop nil ] ~pos ]
              with-seq ] def
:drop-first [ .[ '1 0 > [ rest '1 dec drop-first ] when ] when-seq ] def

:take-while [ p? . nil [ over p? 'lseq1 [ 2drop nil ] if ] foldr' ] def
:drop-while [ p? . [ dup first p? [ rest 'p? drop-while ] when ]
              when-seq ] def

; TODO: split-at, split-w/, ...
; TODO: last, init

; searching
;
; NB: see also elem?.
;
; >>> [1-) [ 4 > ] find
; 5
; >>> 10 [1-n] [ 0 < ] find
; nil

:find   [ filter 'drop with-seq ] def

                                                                ; }}}1

; -- Lists, Dicts & Indexing --                                 ; {{{1

; lists: head & tail ("safe" & "unsafe"), (un)cons
;
; NB: ^seq/first/rest is usually a better choice than
; uncons^/head/tail.
;
; >>> ( 1 2 3 )
; ( 1 2 3 )
; >>> dup head^
; 1
; >>> drop dup tail^
; ( 2 3 )
; >>> , drop uncons^ show-stack
; ( 2 3 )
; 1
; >>> cons
; ( 1 2 3 )
;
; >>> () head^                                      ; partial function
; *** ERROR: list.head^: empty list
; >>> () tail^
; *** ERROR: list.tail^: empty list
; >>> () head
; nil
; >>> () tail
; nil

:head^    '.head^ def
:tail^    '.tail^ def

:head     [ ->nil 'head^ ~> ] def
:tail     [ ->nil 'tail^ ~> ] def

:uncons^  '.uncons^ def
:cons     '!cons    def

; sorted list
;
; >>> ( 4 2 1 3 ) sort
; ( 1 2 3 4 )
;
; >>> ( nil #f #t 0 10 -2.0 4.0 "foo" :bar ) dup sort =
; #t
;
; >>> ( 1 2.0 3 4.0 ) sort                            ; <=> :-(
; ( 1 3 2.0 4.0 )
; >>> ( 1 2.0 3 4.0 ) sort'                           ; cmp :-)
; ( 1 2.0 3 4.0 )

:sort     [ ->list .sort  ] def
:sort'    [ ->list .sort' ] def

; TODO: sort-by

; remove consecutive duplicates
;
; >>> ( 1 2 2 3 2 ) uniq ->list
; ( 1 2 3 2 )
; >>> ( 1 2 2 3 2 ) sort uniq ->list
; ( 1 2 3 )
;
; >>> ( 0.0 0.0 / dup ) uniq ->list
; ( NaN NaN )

:uniq     [ '= uniq-by ] def
:uniq-by  [ f . [ over .[ '1 [ '2 swap f ] drop-while 'f uniq-by ]
                  lseq1 ] with-seq ] def

; merge dicts & update record
;
; >>> { x: 1, y: 2 } { x: 99 } update
; { :x 99 =>, :y 2 => }
;
; >>> , :Point ( :x :y ) defrecord
; >>> Point( 1 2 )
; Point{ :x 1 =>, :y 2 => }
; >>> { y: 3 } update
; Point{ :x 1 =>, :y 3 => }

:update ( :dict :dict ) [ !merge ] defmulti
:update ( :_    :_    ) [ over [ 'record->dict dip !merge ] dip
                          record-type apply-dict ] defmulti     ; TODO

; TODO: update-with function

; keys & values
;
; >>> { x: 1, y: 2 } dup keys
; ( :x :y )
; >>> drop values
; ( 1 2 )
;
; >>> clear-stack
; >>> , :Point ( :x :y ) defrecord
; >>> , Point( 1 2 ) 'keys 'values bi show-stack
; ( 1 2 )
; ( :x :y )

:keys   ( :dict   ) [ .keys   ] defmulti
:values ( :dict   ) [ .values ] defmulti

:keys   ( :_      ) [ record-type record-type-fields  ] defmulti
:values ( :_      ) [ record-values                   ] defmulti

; slicing
;
; >>> "0123456789" 5 [i-)
; "56789"
; >>> "0123456789" -5 [-j)
; "01234"
; >>> "0123456789" 3 -3 [i-j)
; "3456"
; >>> ( 0 1 2 3 4 5 6 7 8 9 ) -5 [i-)
; ( 5 6 7 8 9 )
; >>> ( 0 1 2 3 4 5 6 7 8 9 ) 5 [-j)
; ( 0 1 2 3 4 )
; >>> 10 20 [m-n] 2 -2 [i-j) ->list
; ( 12 13 14 15 16 17 18 )
; >>> [1-) 10 [-j) ->list
; ( 1 2 3 4 5 6 7 8 9 10 )

:[i-j)  [ x i j . 'i 'j 1 'x slice  ] def                       ; TODO
:[i-)   [ nil      [i-j)            ] def
:[-j)   [ nil swap [i-j)            ] def

:slice  ( :str    ) [ !slice      ] defmulti
:slice  ( :list   ) [ !slice      ] defmulti
:slice  ( :Range  ) [ range-slice ] defmulti

; TODO: errors, step
:range-slice  [ _ r .
                [ 0 or ] [ 'r len or ] bi~
                [ 'r >< range-relidx ] bi$
                over [ [ drop nil ] [ >< - ] ~nil ] dip
                'r range-drop range-take
              ] def
:range-relidx [ [ drop nil ] [ [ 'len dip + ] 'nip ~neg ] ~nil ] def
:range-drop   [ [ '+ dip Range ] ^Range ] def
:range-take   [ [ <rot [] [ >< [ over + dec ] dip [] 'min ~nil ]
                  ~nil Range ] ^Range ] def

; get value at key/index & membership test
;
; >>> ( :one :two :three ) 1 get^
; :two
; >>> () 0 get^
; *** ERROR: list.get^: index 0 is out of range
; >>> ( 1 2 3 ) 1 get
; 2
; >>> () 0 get
; nil
;
; >>> { x: 1, y: 2 } dup :x get
; 1
; >>> drop :z get
; nil
; >>> "foobar" 3 get
; "b"
; >>> "foobar" 10 get
; nil
; >>> [1-) 10 get
; 11
; >>> 10 [1-n] 10 get
; nil
;
; >>> ( :one :two :three ) 1 has?                     ; valid index of
; #t
; >>> ( :one :two :three ) :two elem?                 ; element of
; #t
; >>> { x: 1, y: 2 } :y has?
; #t
; >>> "foobar" 3 has?
; #t
; >>> "hypotheekofferte" "theekoffer" elem?           ; is substring
; #t
;
; >>> [1-) 0 has?
; #t
; >>> [1-) 0 elem?
; #f
; >>> [1-) 99 elem?
; #t
; >>> 100 [1-n) 100 elem?
; #f

:get    [ 2dup has? 'get^ [ 2drop nil ] if ] def

:get^   [ swap get^'  ] def
:has?   [ swap has?'  ] def
:elem?  [ swap elem?' ] def

:get^'  ( :_ ) [ !get^  ] defmulti
:has?'  ( :_ ) [ !has?  ] defmulti
:elem?' ( :_ ) [ !elem? ] defmulti

:has?'  ( :nil    ) [ 2drop #f ] defmulti               ; for assoc-in

:get^'  ( :Range  ) [ [ '+ [ [ + dup ] dip <= swap nil ? ] ~nil ]
                      ^Range ] defmulti
:has?'  ( :Range  ) [ get^' nil? not ] defmulti
:elem?' ( :Range  ) [ [ '>= [ 'over dip '>= '<= 2bi~ and ] ~nil ]
                      ^Range ] defmulti                         ; TODO

; first & second element
;
; >>> :x :y 2list
; ( :x :y )
; >>> , '1st '2nd bi show-stack
; :y
; :x

:1st    'first def
:2nd    [ rest 'first ~> ] def

; nth element
;
; >>> [1-) 10 nth
; 11
; >>> [1-) [ dup * ] map 10 nth
; 121

:nth    [ swap nth' ] def                                       ; TODO

:nth'   ( :_    ) [ swap get ] defmulti
:nth'   ( :LSeq ) [ [ drop nil ]
                    [ x xt . [ dec 'xt nth' ] [ drop 'x ] ~pos ]
                    ^seq ] defmulti

; pair each element with its index
;
; >>> "foo" indexed ->list
; ( ( 0 "f" ) ( 1 "o" ) ( 2 "o" ) )
; >>> "foo" indexed' ->list
; ( ( "f" 0 ) ( "o" 1 ) ( "o" 2 ) )

:indexed  [ [0-) swap zip' ] def
:indexed' [ [0-)      zip' ] def

; get value in nested associative structure
;
; >>> , ( { x: 42 } { y: ( 37 ) } )
; >>> dup ( 0 :x ) get-in
; 42
; >>> drop ( 1 :y 0 ) get-in
; 37

:get-in [ [ 'get $ ] map ~~> ] def

; associate value in (nested) associative structure
;
; >>> { x: 1, y: 2 } 3 :z assoc
; { :x 1 =>, :y 2 =>, :z 3 => }
;
; >>> , ( { x: 42 } { y: ( 37 ) } )
; >>> #t ( 1 :z ) assoc-in
; ( { :x 42 => } { :y ( 37 ) =>, :z #t => } )
; >>> nil "magic" ( :x :y :z ) assoc-in
; { :x { :y { :z "magic" => } => } => }
;
; >>> ( 1 2 ) :x 2 assoc
; ( 1 2 :x )
; >>> ( 1 2 ) :x 3 assoc
; *** ERROR: assoc: index 3 is out of range

:assoc    [ <rot assoc' ] def
:assoc-in [ [ [] [ v k kt . dup 'k get 'v 'kt assoc-in 'k ] ~seq
              assoc ] ^seq' ] def                               ; TODO

:assoc' ( :nil  ) [ v k _ . { 'k 'v => } ] defmulti
:assoc' ( :list ) [ v i l .
                    'l len inc 'i "assoc" assert-in-range
                    'l 'i [-j) ( 'v ) 'l 'i inc [i-) ++ ++
                  ] defmulti
:assoc' ( :dict ) [ v k d . 'd { 'k 'v => } !merge ] defmulti

:assert-in-range  [ l i s . 'i 0 < 'i 'l >= or [
                    ( 's 'i ) "${0}: index ${1} is out of range" fmt
                    fail
                  ] when ] def

; "update" value in (nested) associative structure
;
; >>> { x: 1, y: 2 } 'inc :x modify
; { :x 2 =>, :y 2 => }
;
; >>> { x: { y: 1 } } 'inc ( :x :y ) modify-in
; { :x { :y 2 => } => }
; >>> { x: { y: 1 } } [ [ 42 ] 'inc ~nil ] ( :x :z ) modify-in
; { :x { :y 1 =>, :z 42 => } => }
;
; >>> { x: 1, y: 2 } :x 'dec modify'
; { :x 0 =>, :y 2 => }
; >>> { x: { y: 1 } } ( :x :y ) 'dec modify-in'
; { :x { :y 0 => } => }

:modify     [ f k  . dup 'k  get    f 'k  assoc    ] def
:modify-in  [ f ks . dup 'ks get-in f 'ks assoc-in ] def        ; TODO

:modify'    [ swap modify     ] def
:modify-in' [ swap modify-in  ] def

                                                                ; }}}1

; -- Regexes & String Formatting --                             ; {{{1

; match
;
; NB: see also rx-match.
;
; >>> "foo" "^f" =~                                   ; boolean
; #t
; >>> "bar" "^f" =~
; #f

:=~ ( :str :str ) [ rx-match bool ] defmulti                    ; TODO

; filter using =~
;
; >>> ( "one" "two" "three" ) "^o|ee" grep ->list
; ( "one" "three" )

:grep   [ '=~ $ filter ] def

; substitute/replace
;
; NB: see also rx-sub.
;
; >>> "1 2 3 4" "$2 $1" "(\w+) (\w+)" rx-sub1
; "2 1 3 4"
; >>> "1 2 3 4" "$2 $1" "(\w+) (\w+)" rx-suball
; "2 1 4 3"
;
; >>> "foo bar baz" [ reverse ] "\w+" s///            ; Perl-style alias
; "oof bar baz"
; >>> "foo bar baz" [ reverse ] "\w+" s///g
; "oof rab zab"

:rx-sub1    [ #f rx-sub ] def
:rx-suball  [ #t rx-sub ] def

:s///       'rx-sub1      def
:s///g      'rx-suball    def

; string formatting (WIP)
;
; >>> ( :x 42 "foo"  ) "${2} ${1} ${0}" fmt
; "foo 42 :x"

:fmt    [ >< .[ '1 >< str->int get ->str nip ]
          "\$\{(\d+)\}" s///g ] def                             ; TODO

; TODO: width, zero-fill, justify, dict key, ...

; character classification
;
; >>> "猫" is-letter?
; #t
; >>> "foo" is-lower?
; #t
; >>> "FOO" is-upper?
; #t
; >>> "ⅵ" is-number?
; #t
; >>> "…" is-punct?
; #t
; >>> "\u0308" is-mark?                               ; diaeresis
; #t
; >>> "€" is-symbol?
; #t
; >>> "\u2028" is-sep?                                ; line separator
; #t
; >>> "\u00a0" is-space?                              ; nbsp
; #t
; >>> "42" is-digit?
; #t
; >>> "00a0" is-hex?
; #t
; >>> "0644" is-oct?
; #t

:is-letter? [ "^\p{L}+$"        =~ ] def                        ; TODO
:is-lower?  [ "^\p{Ll}+$"       =~ ] def
:is-upper?  [ "^\p{Lu}+$"       =~ ] def
:is-number? [ "^\p{N}+$"        =~ ] def
:is-punct?  [ "^\p{P}+$"        =~ ] def
:is-mark?   [ "^\p{M}+$"        =~ ] def
:is-symbol? [ "^\p{S}+$"        =~ ] def
:is-sep?    [ "^\p{Z}+$"        =~ ] def
:is-space?  [ "^\p{Zs}+$"       =~ ] def
:is-digit?  [ "^[0-9]+$"        =~ ] def
:is-hex?    [ "^[0-9a-fA-F]+$"  =~ ] def
:is-oct?    [ "^[0-7]+$"        =~ ] def

                                                                ; }}}1

; -- "Quasi-Macros" --                                          ; {{{1

; lexical bindings
;
; >>> { x: 1, y: 2 } [ 'y 'x + ] let
; 3
; >>> { x: 1, y: 2 } let[ 'y 'x + ]
; 3

:let    [ [ '.values '.keys bi ] dip '__block-code__ keep __block__
          apply ] def                                           ; TODO

                                                                ; }}}1

; -- Miscellaneous --                                           ; {{{1

; identity function
;
; >>> id
; >>> []
; [ ]

:id     [     ] def
:[]     [ 'id ] def

; call n times
;
; >>> , [ "Hi!" say! ] 5 times
; Hi!
; Hi!
; Hi!
; Hi!
; Hi!
; >>> 0 1 [ '+ keep swap ] 5 times
; 8

:times  [ [1-n] swap 'drop % each ] def

; print str or value to stdout
;
; >>> 42 display!
; 42
; >>> "foo" display!
; foo

:display! [ ->str say! ] def

; read lines from stdin
;
; NB: read-line! (like ask!) returns nil at EOF.

:read-line! [ nil ask! ] def                                    ; TODO
:lines!     [ read-line! [ 'lines! lseq1 ] ~> ] def

                                                                ; }}}1

; -- Modules --                                                 ; {{{1

; require module (loads from file if not defined)
;
; >>> , :no-such-module require
; *** ERROR: cannot load module no-such-module
; >>> , :no-such-module [] defmodule                  ; ^^'
; >>> , :no-such-module require

:require [ dup __modules__ !elem? not '__load-module__ when1 ] def

; use module (require + import(-from))
;
; >>> , :_test use
; loading module _test...
; >>> 'x
; 1
;
; >>> , ( :x :y ) :_test use-from
; >>> 'y
; 2

:use      [ __caller-module__ . 'require
            [ '__caller-module__ defmodule[ import      ] ] bi ] def
:use-from [ __caller-module__ . 'require
            [ '__caller-module__ defmodule[ import-from ] ] bi ] def

                                                                ; }}}1

; -- Unicode Aliases --                                         ; {{{1

:←      'def      def   ; ^k<- (vim digraph)

:≠      'not=     ←     ; ^k!=
:≤      '<=       ←     ; ^k=<
:≥      '>=       ←     ; ^k=>

:∘      '%        ←     ; ^kOb

:¬      'not      ←     ; ^kNO
:∧      'and      ←     ; ^kAN
:∨      'or       ←     ; ^kOR

:~[≠]   '~[not=]  ←
:~[≤]   '~[<=]    ←
:~[≥]   '~[>=]    ←

:∋      'elem?    ←     ; ^k-)
:∌      [ ∋ not ] ←

                                                                ; }}}1

; ...

; -- END --

]

; vim: set tw=70 sw=2 sts=2 et fdm=marker :
