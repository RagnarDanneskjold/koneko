; --                                                            ; {{{1
;
; File        : prelude.knk
; Maintainer  : Felix C. Stegerman <flx@obfusk.net>
; Date        : 2019-11-27
;
; Copyright   : Copyright (C) 2019  Felix C. Stegerman
; Version     : v0.0.1
; License     : LGPLv3+
;
; --                                                            ; }}}1

:__prld__ [

; -- TODO --
;
; * more functions!
; * refactor!
;
; --

; -- aliases for primitives --                                  ; {{{1

:def                '__def__                __def__

:call               '__call__                 def
:apply              '__apply__                def
:apply-dict         '__apply-dict__           def

:if                 '__if__                   def

:defmulti           '__defmulti__             def
:defrecord          '__defrecord__            def

:=>                 '__=>__                   def
:dict               '__dict__                 def

:show               '__show__                 def
:say!               '__say!__                 def
:ask!               '__ask!__                 def

:type               '__type__                 def
:callable?          '__callable?__            def
:function?          '__function?__            def

:defmodule          '__defmodule__            def
:import             '__import__               def
:import-from        '__import-from__          def

:=                  '__=__                    def
:not=               '__not=__                 def
:<                  '__<__                    def
:<=                 '__<=__                   def
:>                  '__>__                    def
:>=                 '__>=__                   def

:int->float         '__int->float__           def
:record->dict       '__record->dict__         def

:record-type        '__record-type__          def
:record-values      '__record-values__        def
:record-type-name   '__record-type-name__     def
:record-type-fields '__record-type-fields__   def

:fail               '__fail__                 def

                                                                ; }}}1

; -- stack shuffling --                                         ; {{{1

; >>> , 1 2 show-stack
; 2
; 1
; >>> , swap show-stack
; 1
; 2

:swap   [ x y . 'y 'x ] def                   ; '__swap__

; >>> , 1 2 3 rot> show-stack
; 2
; 1
; 3
; >>> , <rot show-stack
; 3
; 2
; 1

:rot>   [ x y z . 'z 'x 'y  ] def             ; [ swap 'swap dip ]
:<rot   [ x y z . 'y 'z 'x  ] def             ; [ 'swap dip swap ]

; >>> , 42 dup show-stack
; 42
; 42
; >>> clear-stack
; >>> , 1 2 2dup show-stack
; 2
; 1
; 2
; 1

 :dup   [ x   . 'x 'x       ] def
:2dup   [ x y . 'x 'y 'x 'y ] def             ; [ over over ]

; >>> nil
; nil
; >>> drop
; >>> drop
; *** ERROR: stack underflow
; >>> 42 37 2drop

 :drop  [ _   . ] def
:2drop  [ _ _ . ] def                         ; [ drop drop ]

; >>> , 42 37 nip show-stack
; 37

:nip    [ _ y . 'y ] def                      ; [ 'drop dip ]

; >>> , 1 2 over show-stack
; 1
; 2
; 1
; >>> clear-stack
; >>> , 1 2 3 2over show-stack
; 2
; 1
; 3
; 2
; 1

 :over  [ x y   . 'x 'y 'x        ] def       ; [ 'dup dip swap ]
:2over  [ x y z . 'x 'y 'z 'x 'y  ] def       ; [ over2 over2 ]

; >>> , 1 2 3 over2 show-stack
; 1
; 3
; 2
; 1

:over2  [ x y z . 'x 'y 'z 'x ] def           ; [ 'over dip swap ]

                                                                ; }}}1

; -- combinators --                                             ; {{{1

; dip: remove top value(s), call function, restore value(s)
;
; >>> , 1 2 'dup dip show-stack
; 2
; 1
; 1
; >>> clear-stack
; >>> , 1 2 3 4 '- 2dip show-stack
; 4
; 3
; -1
; >>> clear-stack
; >>> , 1 2 3 4 'neg 3dip show-stack
; 4
; 3
; 2
; -1

 :dip   [ x f   . f 'x    ] def
:2dip   [ x y f . f 'x 'y ] def               ; [ swap 'dip dip ]
:3dip   [ swap '2dip dip  ] def

; keep: copy top value(s), call function, push value(s)
;
; >>> , 2 [ dup * ] keep show-stack
; 2
; 4
; >>> clear-stack
; >>> , 2 3 '* 2keep show-stack
; 3
; 2
; 6

 :keep  [  over 'call  dip  ] def             ; [ x f . 'x f 'x ]
:2keep  [ 2over 'call 2dip  ] def             ; [ '2dup dip 2dip ]

; bi, tri: call multiple functions on one value
;
; >>> , 35 [ 2 + ] [ 7 + ] bi show-stack
; 42
; 37
; >>> clear-stack
; >>> , 2 [ 1 + ] [ 2 * ] [ 3 - ] tri show-stack
; -1
; 4
; 3

:bi     [ x f g   . 'x f 'x g       ] def     ; [ 'keep dip call ]
:tri    [ x f g h . 'x f 'x g 'x h  ] def     ; [ 'keep 2dip bi ]

; bi$, tri$: call a function on multiple values
;
; >>> 2 3 [ dup * ] bi$ +
; 13
; >>> clear-stack
; >>> , 2 3 4 [ dup * ] tri$ show-stack
; 16
; 9
; 4

:bi$    [ x y f   . 'x f 'y f       ] def     ; [ dup bi~ ]
:tri$   [ x y z f . 'x f 'y f 'z f  ] def     ; [ dup dup tri~ ]

; bi~, tri~: "pair" multiple functions and values
;
; >>> , 4 9 [ 2 + ] [ 3 div ] bi~ show-stack
; 3
; 6
; >>> clear-stack
; >>> ( 1 2 3 :x :y :z .[ '1 swap => ] tri$ tri~ )
; ( :x 1 => :y 2 => :z 3 => )

:bi~    [ x y f g     . 'x f 'y g       ] def ; [ 'dip dip call ]
:tri~   [ x y z f g h . 'x f 'y g 'z h  ] def

; bi*: "multiply" multiple functions and values
;
; >>> , 2 3 [ dup * ] [ 1 + ] bi* show-stack
; 4
; 3
; 9
; 4

:bi*    [ [ ![ '1 bi$ ] 2keep ] dip bi$ ] def

; >>> , 1 2 '+ '- 2bi show-stack
; -1
; 3
; >>> clear-stack
; >>> , 7 2 '+ '- 'div 2tri show-stack
; 3
; 5
; 9

:2bi    [ '2keep dip call ] def
:2tri   [ '2keep 2dip 2bi ] def

; >>> , 1 2 3 4 '+ 2bi$ show-stack
; 7
; 3
; >>> clear-stack
; >>> , 1 3 2 4 '+ 2bi$' show-stack
; 7
; 3

:2bi$   [ dup 2bi~        ] def
:2bi$'  [ 'swap 2dip 2bi$ ] def

; >>> , 1 2 3 4 '+ '- 2bi~ show-stack
; -1
; 3
; >>> clear-stack
; >>> , 1 3 2 4 '+ '- 2bi~' show-stack
; -1
; 3

:2bi~   [ '2dip dip call  ] def
:2bi~'  [ 'swap 3dip 2bi~ ] def

                                                                ; }}}1

; -- logic & order --                                           ; {{{1

; >>> #t 42 37 ?
; 42

:?      [ .[ '1 ] bi$ if ] def

; >>> 1 2 = [ "oh no!" say! ] when
; >>> 1 1 = [ "good!"  say! ] when
; good!
; >>> , 42 dup 2 mod 0 = [ 2 div ] when1 show-stack
; 21
; >>> clear-stack
; >>> 1 2 2dup = '+ when2

:when   [ [ ]    if ] def
:when1  [ 'drop  if ] def
:when2  [ '2drop if ] def

; >>> 5 not
; #f
; >>> nil not
; #t
; >>> nil 5 or
; 5
; >>> nil 5 and
; nil
; >>> 2 3 or
; 2
; >>> 2 3 and
; 3

:not    [ #f #t ?     ] def
:and    [ over ?      ] def
:or     [ 'dup dip ?  ] def

; >>> 1 2 min
; 1
; >>> -1 -2 max
; -1

:min    [ 2dup <= 'drop 'nip if ] def
:max    [ 2dup >= 'drop 'nip if ] def

                                                                ; }}}1

; -- arithmetic --                                              ; {{{1

; >>> 1 2 +
; 3
; >>> 4 3 -
; 1
; >>> 6 7 *
; 42
; >>> 1.0 2.0 +
; 3.0
; >>> 4.0 3 -
; 1.0
; >>> 6 7.0 *
; 42.0

:+ ( :int   :int    ) [ __int+__          ] defmulti
:+ ( :float :float  ) [ __float+__        ] defmulti
:+ ( :int   :float  ) [ 'int->float dip + ] defmulti
:+ ( :float :int    ) [  int->float     + ] defmulti

:- ( :int   :int    ) [ __int-__          ] defmulti
:- ( :float :float  ) [ __float-__        ] defmulti
:- ( :int   :float  ) [ 'int->float dip - ] defmulti
:- ( :float :int    ) [  int->float     - ] defmulti

:* ( :int   :int    ) [ __int*__          ] defmulti
:* ( :float :float  ) [ __float*__        ] defmulti
:* ( :int   :float  ) [ 'int->float dip * ] defmulti
:* ( :float :int    ) [  int->float     * ] defmulti

; >>> 10 neg
; -10
; >>> -10 neg
; 10
; >>> 3.14 neg
; -3.14

:neg ( :int   ) [ 0   swap - ] defmulti
:neg ( :float ) [ 0.0 swap - ] defmulti

; >>> 1.0 2.0 /
; 0.5
; >>> 8 3 div
; 2
; >>> 8 3 mod
; 2

:/      '__float/__ def ; aliases
:div    '__div__    def
:mod    '__mod__    def

; TODO:
;   * div/mod vs quot/rem
;   * abs, floor, ceil, round**, trunc, ...
;   * pi, exp, log, sqrt, sin, cos, ...
;   * ^ :math import ?!

                                                                ; }}}1

; -- strings & characters --                                    ; {{{1

; >>> "猫" ord
; 29483
; >>> 0x732b chr
; "猫"

:ord    '.ord     def
:chr    '__chr__  def

                                                                ; }}}1

; -- nil, num, & pair --                                        ; {{{1

; nil "branch"
;
; >>> , :f [ [ "nil!" say! ] [ type show say! ] ~nil ] def
; >>> nil f
; nil!
; >>> 42 f
; :int

:~nil   [ x f g . 'x nil? 'f [ 'x g ] if ] def
      ; [ <rot .[ '2 .1 ] 'nil? bi rot> if ]

; >>> 1 num?
; #t
; >>> 3.14 num?
; #t
; >>> () num?
; #f

:num?   [ 'int? 'float? bi or ] def

; number "branch"
;
; >>> 0 [ " negative" ] [ " non-negative" ] ~neg  'show dip ++ say!
; 0 non-negative
; >>> 0 [ " zero"     ] [ " non-zero"     ] ~zero 'show dip ++ say!
; 0 zero
; >>> 0 [ " positive" ] [ " non-positive" ] ~pos  'show dip ++ say!
; 0 non-positive

:~neg   [ [ dup 0 < ] 2dip if ] def
:~zero  [ [ dup 0 = ] 2dip if ] def
:~pos   [ [ dup 0 > ] 2dip if ] def

; TODO: floats

; pair "pattern match"
;
; >>> , x: 42 'swap ^pair, show-stack
; :x
; 42

:^pair  [ [ '.key '.value bi ] dip call ] def

                                                                ; }}}1

; -- sequences, lists, & ranges --                              ; {{{1

; NB: inclusive; infinite if stop is nil
:Range ( :start :stop ) defrecord

:[m-n]  'Range            def
:[m-n)  [ 1 -    [m-n]  ] def
:[m-)   [ nil    [m-n]  ] def
:[0-n]  [ 0 swap [m-n]  ] def
:[0-n)  [ 0 swap [m-n)  ] def
:[0-)   [ 0 nil  [m-n]  ] def
:[1-n]  [ 1 swap [m-n]  ] def
:[1-n)  [ 1 swap [m-n)  ] def
:[1-)   [ 1 nil  [m-n]  ] def

; TODO: floats

; >>> 42 1list
; ( 42 )
; >>> :x :y 2list
; ( :x :y )

:1list  [ () cons     ] def
:2list  [ 1list cons  ] def

; lazy sequence
;
; >>> , [ "evaluated once" say!, ( 1 2 3 ) ] lazy-seq
; >>> dup !thunk
; evaluated once
; ( 1 2 3 )
; >>> drop !thunk
; ( 1 2 3 )

:LSeq ( :chunk :thunk ) defrecord   ; NB: chunk must be a list

:lseq     [ __thunk__  LSeq ] def
:lseq1    [ '1list dip lseq ] def
:lazy-seq [ () swap    lseq ] def

; seq returns either the sequence (when not empty) or nil
;
; >>> nil seq
; nil
; >>> "foo" seq
; ( "f" "o" "o" )
; >>> ( 1 2 3 ) seq
; ( 1 2 3 )
; >>> () seq
; nil
; >>> { x: 1, y: 2 } seq
; ( :x 1 => :y 2 => )
; >>> 10 [1-n] dup seq =
; #t
; >>> [ ( 1 2 3 ) ] lazy-seq seq
; ( 1 2 3 )

:seq    ( :nil    ) [ ] defmulti
:seq    ( :str    ) [ _empty?->nil '->list if ] defmulti        ; TODO
:seq    ( :list   ) [ _empty?->nil when       ] defmulti
:seq    ( :dict   ) [ _empty?->nil '.pairs if ] defmulti        ; TODO
:seq    ( :Range  ) [ _empty?->nil when       ] defmulti
:seq    ( :LSeq   ) [ dup .chunk empty? [ !thunk seq ] when ] defmulti

:_empty?->nil [ dup empty? [ drop nil ] ] def

; unseq <=> 'first 'rest bi
;
; >>> , ( 1 2 ) unseq show-stack
; ( 2 )
; 1
; >>> clear-stack
; >>> , 3 10 [m-n] unseq len show-stack
; 7
; 3
; >>> clear-stack
; >>> , [ ( 1 2 ) ] lazy-seq unseq show-stack
; ( 2 )
; 1

:unseq  ( :list   ) [ [ nil nil ] [ ] ^list ] defmulti
:unseq  ( :Range  ) [ [ [ dup 1 + ] dip Range ] ^Range ] defmulti
:unseq  ( :LSeq   ) [ [ c t .
                      'c seq [ 'c unseq 't LSeq ] [ t unseq ] if
                    ] ^LSeq ] defmulti

; first and rest resturn the first element (or nil) and the rest of
; the sequence (or nil), respectively
;
; >>> ( 1 2 3 ) first
; 1
; >>> ( 1 2 3 ) rest
; ( 2 3 )

:first  ( :_ ) [ unseq drop ] defmulti
:rest   ( :_ ) [ unseq nip  ] defmulti

; empty? <=> seq not
;
; >>> "foo" empty?
; #f
; >>> () empty?
; #t
; >>> { x: 1 } empty?
; #f
; >>> 1 [1-n] rest empty?
; #t
; >>> ( 1 2 3 ) [ 1 + ] map empty?
; #f

:empty? ( :str    ) [ .empty? ] defmulti
:empty? ( :list   ) [ .empty? ] defmulti
:empty? ( :dict   ) [ .empty? ] defmulti
:empty? ( :Range  ) [ [ [ drop #f ] '> ~nil ] ^Range ] defmulti
:empty? ( :_      ) [ seq not ] defmulti

; >>> "foo" len
; 3
; >>> ( 1 2 ) len
; 2
; >>> { x: 1 } len
; 1
; >>> 37 42 [m-n) len
; 5
; >>> 42 [m-) len
; nil
; >>> ( 1 2 3 ) [ 2 >= ] filter len
; 2

:len    ( :str    ) [ .len        ] defmulti
:len    ( :list   ) [ .len        ] defmulti
:len    ( :dict   ) [ .len        ] defmulti
:len    ( :Range  ) [ range-len   ] defmulti
:len    ( :_      ) [ ->list len  ] defmulti                    ; TODO

:range-len [ [ [ drop nil ] [ swap - 1 + ] ~nil ] ^Range ] def

; append two sequences
;
; >>> "foo" "bar" ++
; "foobar"
; >>> ( 1 2 3 ) ( 4 5 ) ++
; ( 1 2 3 4 5 )

:++     ( :str  :str  ) [ !append ] defmulti
:++     ( :list :list ) [ !append ] defmulti

; >>> ( 1 2 3 ) [ ( 4 5 ) ] lazy-seq ++ ->list
; ( 1 2 3 4 5 )
; >>> [ ( 1 2 3 ) ] lazy-seq ( 4 5 ) ++ ->list
; ( 1 2 3 4 5 )

:++     ( :nil  :LSeq ) [ nip                     ] defmulti
:++     ( :list :LSeq ) [ [ '++ dip LSeq ] ^LSeq  ] defmulti
:++     ( :LSeq :list ) [ _lseq++                 ] defmulti
:++     ( :LSeq :LSeq ) [ _lseq++                 ] defmulti

:_lseq++ [ l . [ ![ .1 'l ++ ] lseq ] ^LSeq ] def

; >>> "foo" ->list
; ( "f" "o" "o" )
; >>> ( 1 2 3 ) ->list
; ( 1 2 3 )
; >>> { x: 1, y: 2 } ->list
; ( :x 1 => :y 2 => )

:->list ( :str  ) [ .->list ] defmulti
:->list ( :list ) [         ] defmulti
:->list ( :dict ) [ .pairs  ] defmulti

:->list ( :_    ) [ xs . ( 'xs [ ] each ) ] defmulti            ; TODO
                ; [ [ () ] [ ->list cons ] ^seq ]

; list & seq "pattern match"
;
; >>> ( 1 2 3 ) [ "empty" ] [ hd tl . 'hd ] ^list  ; head or "empty"
; 1
; >>> () [ "empty" ] 'drop ^seq
; "empty"

:^list  [ f g . dup .empty? [ drop f ] [ .uncons^ g ] if ] def
:^seq   [ 'seq 2dip ![ unseq .1 ] ~nil ] def

; >>> () 'len when-seq
; nil
; >>> ( 1 2 3 ) 'len when-seq
; 3
; >>> ( 1 2 3 ) 'drop with-seq
; 1
; >>> () 'drop with-seq
; nil

:when-seq [ [ seq dup ] dip when  ] def
:with-seq [ [ nil ] swap ^seq     ] def

; "lazy" map & filter
;
; >>> ( 1 2 3 ) [ dup * ] map ->list
; ( 1 4 9 )
; >>> ( 1 2 3 ) 'dup map ->list
; ( 1 1 2 2 3 3 )
; >>> ( 1 2 3 4 ) [ 2 mod 0 = ] filter ->list
; ( 2 4 )

:map    [ f . [ x xt . ( 'x f ) [ 'xt 'f map ] lseq ] with-seq ] def
:filter [ ![ dup .1 not 'drop when ] map ] def

; >>> ( 1 2 ) ( 3 4 5 ) '2list zip ->list
; ( ( 1 3 ) ( 2 4 ) )
; >>> [1-) ( :x :y ) [ swap => ] zip ->list dict
; { :x 1 =>, :y 2 => }

:zip    [ f . [ drop nil ] [ y yt . [ x xt .
          ( 'x 'y f ) [ 'xt 'yt 'f zip ] lseq
        ] with-seq ] ^seq ] def

; TODO: unzip

; >>> ( 2 3 4 ) 10 '- foldl
; 1
; >>> ( 2 3 4 ) () [ [ 1 + ] dip cons ] foldr         ; "strict"
; ( 3 4 5 )
; >>> ( 2 3 4 ) () [ [ 1 + ] dip call cons ] foldr'   ; "lazy"
; ( 3 4 5 )

:foldl  [ f . swap [ ] [ rot> f 'f foldl             ] ^seq ] def
:foldr  [ f . swap [ ] [ <rot 'f foldr f             ] ^seq ] def
:foldr' [ f . swap [ ] [ <rot ![ '1 '2 'f foldr' ] f ] ^seq ] def

; TODO: scanl, scanr
; TODO: any, all
; TODO: min, max, sum, prod

; >>> ( ( 1 2 3 ) dup [ dup * ] map ) concat ->list
; ( 1 2 3 1 4 9 )
; >>> ( 1 2 3 ) reverse                               ; "strict"
; ( 3 2 1 )

:concat   [ () [ lazy-seq ++ ] foldr' ] def
:reverse  ( :_ ) [ () [ swap cons ] foldl ] defmulti

; >>> , ( "Hello" "World" ) 'say! each
; Hello
; World
; >>> , ( 1 2 3 ) [ ] each show-stack
; 3
; 2
; 1
; >>> ( ( 1 2 ) 'dup each )
; ( 1 1 2 2 )

:each   [ f . [ ] [ 'f dip 'f each ] ^seq ] def

; >>> ( 1 2 3 ) cycle 10 take-first ->list
; ( 1 2 3 1 2 3 1 2 3 1 )
; >>> 0 [ 1 + ] iterate 10 take-first 2 drop-first ->list
; ( 2 3 4 5 6 7 8 9 )
; >>> 1 [ 2 * ] iterate [ 10 < ] drop-while [ 80 < ] take-while ->list
; ( 16 32 64 )
; >>> 42 repeat 4 take-first ->list
; ( 42 42 42 42 )
; >>> :x 3 replicate ->list
; ( :x :x :x )

:cycle      [ repeat concat ] def
:iterate    [ x f . 'x [ 'x f 'f iterate ] lseq1 ] def
:repeat     [ dup ![ '1 repeat ] lseq1 ] def
:replicate  [ 'repeat dip take-first ] def

:take-first [ n . [
              'n 0 > [ 'n 1 - ![ '1 '2 take-first ] lseq1 ]
                [ 2drop nil ] if
            ] with-seq ] def

:drop-first [ n . [
              'n 0 > [ rest 'n 1 - drop-first ] when
            ] when-seq ] def

:take-while [ p? . nil [ over p? 'lseq1 [ 2drop nil ] if ] foldr' ] def

:drop-while [ p? . [
              dup first p? [ rest 'p? drop-while ] when
            ] when-seq ] def

; TODO: split-at, split-w/, ...
; TODO: last, init

                                                                ; }}}1

; -- lists, dicts, & indexing --                                ; {{{1

; >>> ( 1 2 3 )
; ( 1 2 3 )
; >>> dup head^
; 1
; >>> drop dup tail^
; ( 2 3 )
; >>> , drop uncons^ show-stack
; ( 2 3 )
; 1
; >>> cons
; ( 1 2 3 )
; >>> () head^
; *** ERROR: list.head^: empty list
; >>> () tail^
; *** ERROR: list.tail^: empty list
; >>> () head
; nil
; >>> () tail
; nil
; >>> ( 4 2 1 3 ) sort
; ( 1 2 3 4 )

:head^    '.head^ def
:tail^    '.tail^ def

:head     [ _empty?->nil 'head^ if ] def
:tail     [ _empty?->nil 'tail^ if ] def

:uncons^  '.uncons^ def
:cons     '!cons    def
:sort     '.sort    def

; >>> { x: 1, y: 2 } { x: 99 } update
; { :x 99 =>, :y 2 => }

:update ( :dict :dict ) [ !merge ] defmulti
:update ( :_    :_    ) [ over [ 'record->dict dip !merge ] dip
                          record-type apply-dict ] defmulti     ; TODO

; >>> { x: 1, y: 2 } dup keys
; ( :x :y )
; >>> drop values
; ( 1 2 )

:keys   ( :dict   ) [ .keys   ] defmulti
:values ( :dict   ) [ .values ] defmulti

:keys   ( :_      ) [ record-type record-type-fields  ] defmulti
:values ( :_      ) [ record-values                   ] defmulti

; >>> "0123456789" 5 [i-)
; "56789"
; >>> "0123456789" -5 [-j)
; "01234"
; >>> "0123456789" 3 -3 [i-j)
; "3456"
; >>> ( 0 1 2 3 4 5 6 7 8 9 ) -5 [i-)
; ( 5 6 7 8 9 )
; >>> ( 0 1 2 3 4 5 6 7 8 9 ) 5 [-j)
; ( 0 1 2 3 4 )
; >>> 10 20 [m-n] 2 -2 [i-j) ->list
; ( 12 13 14 15 16 17 18 )

:[i-j)  [ x i j . 'i 'j 1 'x slice  ] def                       ; TODO
:[i-)   [ nil      [i-j)            ] def
:[-j)   [ nil swap [i-j)            ] def

:slice  ( :str    ) [ !slice      ] defmulti
:slice  ( :list   ) [ !slice      ] defmulti
:slice  ( :Range  ) [ range-slice ] defmulti

; TODO: errors, step
:range-slice  [ _ r .
                [ 0 or ] [ 'r len or ] bi~
                [ 'r swap range-relidx ] bi$
                over [ [ drop nil ] [ swap - ] ~nil ] dip
                'r range-drop range-take
              ] def
:range-relidx [ [ drop nil ] [ [ 'len dip + ] 'nip ~neg ] ~nil ] def
:range-drop   [ [ '+ dip Range ] ^Range ] def
:range-take   [ [ <rot [ ] [
                swap [ over + 1 - ] dip [ ] 'min ~nil
              ] ~nil Range ] ^Range ] def

; >>> ( :one :two :three ) 1 get^
; :two
; >>> () 0 get^
; *** ERROR: list.get^: index 0 is out of range
; >>> ( 1 2 3 ) 1 get
; 2
; >>> () 0 get
; nil
; >>> ( :one :two :three ) 1 has?       ; valid index of
; #t
; >>> ( :one :two :three ) :two elem?   ; element of
; #t

:get    [ 2dup has? 'get^ [ 2drop nil ] if ] def

:get^   [ swap get^'  ] def
:has?   [ swap has?'  ] def
:elem?  [ swap elem?' ] def

:get^'  ( :_ ) [ !get^  ] defmulti
:has?'  ( :_ ) [ !has?  ] defmulti
:elem?' ( :_ ) [ !elem? ] defmulti

; TODO
:elem?' ( :Range ) [ 'dup dip [ '>= '<= 2bi~' and ] ^Range ] defmulti

                                                                ; }}}1

; -- miscellaneous --                                           ; {{{1

; >>> , [ "Hi!" say! ] 5 times
; Hi!
; Hi!
; Hi!
; Hi!
; Hi!

:times  [ [1-n] swap ![ drop .1 ] each ] def

; >>> , :temp [
; ...     dup
; ...     ( [ 15 < ]  [ "is cold!"  ]
; ...       [ 25 > ]  [ "is warm!"  ]
; ...       :else     [ "is ok!"    ]
; ...     ) cond
; ...     [ show " " ++ ] dip ++ say!
; ...   ] def
; >>> 10 temp
; 10 is cold!
; >>> 20 temp
; 20 is ok!
; >>> 30 temp
; 30 is warm!

  :cond [ _cond call ] def                                      ; TODO
 :_cond [ cons '_&cond apply ] def
:_&cond [ x p? f & .
          'p? function? [ 'x p? ] [ 'p? ] if [ 'f ] [ 'x '& _cond ] if
        ] def

                                                                ; }}}1

; ...

; -- END --

] __defmodule__

; vim: set tw=70 sw=2 sts=2 et fdm=marker :
